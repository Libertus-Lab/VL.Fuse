shader FuseNoise : FuseHash, FuseMap
{


	////////////////////////////////////////////////////////////////
	//
	//          Vector Noise Helpers
	// 
	////////////////////////////////////////////////////////////////

	// for calling function multiple times to get vector valued result.  Should be in main noise file
	static const float3 vectorValuedNoiseOffsets = float3(17.0, -43.0, 67.0);

	////////////////////////////////////////////////////////////////////////////////////
	// 1D

	// 1D 2D Vector Valued
	void noiseDomainOffset (inout float p1, out float p2)
	{ p2 = p1 + vectorValuedNoiseOffsets.x; }

	// 1D 3D Vector Valued
	void noiseDomainOffset (inout float p1, out float p2, out float p3)
	{ p2 = p1 + vectorValuedNoiseOffsets.x; p3 = p1 + vectorValuedNoiseOffsets.y; }

	// 1D 4D Vector Valued
	void noiseDomainOffset (inout float p1, out float p2, out float p3, out float p4)
	{ p2 = p1 + vectorValuedNoiseOffsets.x; p3 = p1 + vectorValuedNoiseOffsets.y; p4 = p1 + vectorValuedNoiseOffsets.y; }


	////////////////////////////////////////////////////////////////////////////////////
	// 2D

	// 2D 2D Vector Valued
	void noiseDomainOffset (inout float2 p1, out float2 p2)
	{ p2 = p1 + vectorValuedNoiseOffsets.x; }

	//2D 3D Vector Valued
	void noiseDomainOffset (inout float2 p1, out float2 p2, out float2 p3)
	{ p2 = p1 + vectorValuedNoiseOffsets.x; p3 = p1 + vectorValuedNoiseOffsets.y; }

	//2D 4D Vector Valued
	void noiseDomainOffset (inout float2 p1, out float2 p2, out float2 p3, out float2 p4)
	{ p2 = p1 + vectorValuedNoiseOffsets.x; p3 = p1 + vectorValuedNoiseOffsets.y; p4 = p1 + vectorValuedNoiseOffsets.y; }

	////////////////////////////////////////////////////////////////////////////////////
	// 3D

	// 3D 2D Vector Valued
	void noiseDomainOffset (inout float3 p1, out float3 p2)
	{ p2 = p1 + vectorValuedNoiseOffsets.x; }

	// 3D 3D Vector Valued
	void noiseDomainOffset (inout float3 p1, out float3 p2, out float3 p3)
	{ p2 = p1 + vectorValuedNoiseOffsets.x; p3 = p1 + vectorValuedNoiseOffsets.y; }

	// 3D 4D Vector Valued
	void noiseDomainOffset (inout float3 p1, out float3 p2, out float3 p3, out float3 p4)
	{
		p2 = p1 + vectorValuedNoiseOffsets.x; p3 = p1 + vectorValuedNoiseOffsets.y; p4 = p1 + vectorValuedNoiseOffsets.y;
	}

	////////////////////////////////////////////////////////////////////////////////////
	// 4D

	// 4D 2D Vector Valued
	void noiseDomainOffset (inout float4 p1, out float4 p2)
	{ p2 = p1 + vectorValuedNoiseOffsets.x; }

	// 4D 3D Vector Valued
	void noiseDomainOffset (inout float4 p1, out float4 p2, out float4 p3)
	{ p2 = p1 + vectorValuedNoiseOffsets.x; p3 = p1 + vectorValuedNoiseOffsets.y; }

	// 4D 4D Vector Valued
	void noiseDomainOffset (inout float4 p1, out float4 p2, out float4 p3, out float4 p4)
	{
		p2 = p1 + vectorValuedNoiseOffsets.x; p3 = p1 + vectorValuedNoiseOffsets.y; p4 = p1 + vectorValuedNoiseOffsets.y;
	}






	////////////////////////////////////////////////////////////////
	//
	//          Sine Basis
	// 
	////////////////////////////////////////////////////////////////

	// just for study, but can in fact be a usefel cheap basis.  

	// 1D
	float sineBasis11 (float p)
	{
		return sin(p);
	}

	float sineBasis12 (float2 p)
	{
		float2 s = sin(p);

		return dot(s.x,s.y);
	}

	float sineBasis13 (float3 p)
	{
		float3 s = sin(p);
		return dot(dot(s.x, s.y), s.z);
	}

	float sineBasis14 (float4 p)
	{
		float4 s = sin(p);
		return dot(dot(dot(s.x, s.y), s.z), s.w);
	}

	// 2D
	float2 sineBasis21 (float p)
	{
		float p2;
		noiseDomainOffset(p, p2);
		return float2(sineBasis11(p), sineBasis11(p2));
	}

	float2 sineBasis22 (float2 p)
	{
		float2 p2;
		noiseDomainOffset(p, p2);
		return float2(sineBasis12(p), sineBasis12(p2));
	}

	float2 sineBasis23 (float3 p)
	{
		float3 p2;
		noiseDomainOffset(p, p2);
		return float2(sineBasis13(p), sineBasis13(p2));
	}

	float2 sineBasis24 (float4 p)
	{
		float4 p2;
		noiseDomainOffset(p, p2);
		return float2(sineBasis14(p), sineBasis14(p2));
	}

	// 3D
	float3 sineBasis31 (float p)
	{
		float p2, p3;
		noiseDomainOffset(p, p2);
		return float3(sineBasis11(p), sineBasis11(p2), sineBasis11(p3));
	}

	float3 sineBasis32 (float2 p)
	{
		float2 p2, p3;
		noiseDomainOffset(p, p2);
		return float3(sineBasis12(p), sineBasis12(p2), sineBasis12(p3));
	}

	float3 sineBasis33 (float3 p)
	{
		float3 p2, p3;
		noiseDomainOffset(p, p2);
		return float3(sineBasis13(p), sineBasis13(p2), sineBasis13(p3));
	}

	float3 sineBasis34 (float4 p)
	{
		float4 p2, p3;
		noiseDomainOffset(p, p2);
		return float3(sineBasis14(p), sineBasis14(p2), sineBasis14(p3));
	}

	// 4D
	float4 sineBasis41(float p)
	{
		float4 p2, p3, p4;
		noiseDomainOffset(p, p2, p3, p4);
		return float4(sineBasis11(p), sineBasis11(p2), sineBasis11(p3), sineBasis11(p4));
	}

	float4 sineBasis42(float2 p)
	{
		float4 p2, p3, p4;
		noiseDomainOffset(p, p2, p3, p4);
		return float4(sineBasis12(p), sineBasis12(p2), sineBasis12(p3), sineBasis12(p4));
	}

	float4 sineBasis43(float3 p)
	{
		float4 p2, p3, p4;
		noiseDomainOffset(p, p2, p3, p4);
		return float4(sineBasis13(p), sineBasis13(p2), sineBasis13(p3), sineBasis13(p4));
	}

	float4 sineBasis44(float4 p)
	{
		float4 p2, p3, p4;
		noiseDomainOffset(p, p2, p3, p4);
		return float4(sineBasis13(p), sineBasis13(p2), sineBasis13(p3), sineBasis13(p4));
	}
	////////////////////////////////////////////////////////////////




	
	////////////////////////////////////////////////////////////////
	//
	//          Worley Basis
	// 
	////////////////////////////////////////////////////////////////
	/*
	MIT License

	Copyright (c) 2017 Justin Hawkins

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
	*/

	

	//1/7
	#define K 0.142857142857
	//3/7
	#define Ko 0.428571428571

	float3 mod(float3 x, float y) { return x - y * floor(x/y); }
	float2 mod(float2 x, float y) { return x - y * floor(x/y); }

	// Permutation polynomial: (34x^2 + x) mod 289
	float3 Permutation(float3 x) 
	{
	  return mod((34.0 * x + 1.0) * x, 289.0);
	}

	// returns d1 & d2 as float2
	float2 worleyBasis(float2 P, float jitter = .8)
	{			
		float2 Pi = mod(floor(P), 289.0);
		float2 Pf = frac(P);
		float3 oi = float3(-1.0, 0.0, 1.0);
		float3 of = float3(-0.5, 0.5, 1.5);
		float3 px = Permutation(Pi.x + oi);
	
		float3 p, ox, oy, dx, dy;
		float2 F = 1e6;
	
		for(int i = 0; i < 3; i++)
		{
			p = Permutation(px[i] + Pi.y + oi); // pi1, pi2, pi3
			ox = frac(p*K) - Ko;
			oy = mod(floor(p*K),7.0)*K - Ko;
			dx = Pf.x - of[i] + jitter*ox;
			dy = Pf.y - of + jitter*oy;
		
			float3 d = dx * dx + dy * dy; // di1, di2 and di3, squared
		
			//find the lowest and second lowest distances
			for(int n = 0; n < 3; n++)
			{
				if(d[n] < F[0])
				{
					F[1] = F[0];
					F[0] = d[n];
				}
				else if(d[n] < F[1])
				{
					F[1] = d[n];
				}
			}
		}
	
		return F;
	}

	float2 worleyBasis(float3 P, float jitter = .8)
	{			
		float3 Pi = mod(floor(P), 289.0);
		float3 Pf = frac(P);
		float3 oi = float3(-1.0, 0.0, 1.0);
		float3 of = float3(-0.5, 0.5, 1.5);
		float3 px = Permutation(Pi.x + oi);
		float3 py = Permutation(Pi.y + oi);

		float3 p, ox, oy, oz, dx, dy, dz;
		float2 F = 1e6;

		for(int i = 0; i < 3; i++)
		{
			for(int j = 0; j < 3; j++)
			{
				p = Permutation(px[i] + py[j] + Pi.z + oi); // pij1, pij2, pij3

				ox = frac(p*K) - Ko;
				oy = mod(floor(p*K),7.0)*K - Ko;
			
				p = Permutation(p);
			
				oz = frac(p*K) - Ko;
		
				dx = Pf.x - of[i] + jitter*ox;
				dy = Pf.y - of[j] + jitter*oy;
				dz = Pf.z - of + jitter*oz;
			
				float3 d = dx * dx + dy * dy + dz * dz; // dij1, dij2 and dij3, squared
			
				//Find lowest and second lowest distances
				for(int n = 0; n < 3; n++)
				{
					if(d[n] < F[0])
					{
						F[1] = F[0];
						F[0] = d[n];
					}
					else if(d[n] < F[1])
					{
						F[1] = d[n];
					}
				}
			}
		}
	
		return F;
	}

	float2 worleyBasis(float4 P, float jitter = .8)
	{			
		float4 Pi = mod(floor(P), 289.0);
		float4 Pf = frac(P);
		float3 oi = float3(-1.0, 0.0, 1.0);
		float3 of = float3(-0.5, 0.5, 1.5);
		float3 px = Permutation(Pi.x + oi);
		float3 py = Permutation(Pi.y + oi);
		float3 pz = Permutation(Pi.z + oi);

		float3 p, ox, oy, oz, ow, dx, dy, dz, dw, d;
		float2 F = 1e6;
		int i, j, k, n;

		for(i = 0; i < 3; i++)
		{
			for(j = 0; j < 3; j++)
			{
				for(k = 0; k < 3; k++)
				{
					p = Permutation(px[i] + py[j] + pz[k] + Pi.w + oi); // pijk1, pijk2, pijk3
	
					ox = frac(p*K) - Ko;
					oy = mod(floor(p*K),7.0)*K - Ko;
				
					p = Permutation(p);
				
					oz = frac(p*K) - Ko;
					ow = mod(floor(p*K),7.0)*K - Ko;
			
					dx = Pf.x - of[i] + jitter*ox;
					dy = Pf.y - of[j] + jitter*oy;
					dz = Pf.z - of[k] + jitter*oz;
					dw = Pf.w - of + jitter*ow;
				
					d = dx * dx + dy * dy + dz * dz + dw * dw; // dijk1, dijk2 and dijk3, squared
				
					//Find the lowest and second lowest distances
					for(n = 0; n < 3; n++)
					{
						if(d[n] < F[0])
						{
							F[1] = F[0];
							F[0] = d[n];
						}
						else if(d[n] < F[1])
						{
							F[1] = d[n];
						}
					}
				}
			}
		}
	
		return F;
	}




};