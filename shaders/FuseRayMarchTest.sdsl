shader FuseRayMarchTest : ShaderBaseStream, Transformation, Texturing, FuseRayMarch
{

	float SDF(float3 p)
	{
		float d = length(p)-.45;
		d=min(d,dot(p, float3(0,1,0)) + sin(p.x*16) * .04);
		return d;
	}


	Ray setupRay()
	{	
		float2 uv = streams.TexCoord;
		float3 rd = normalize(mul(float4(mul(float4((uv.xy*2-1)*float2(1,-1),0,1),ProjectionInverse).xy,-1,0),ViewInverse).xyz);
		float3 ro = ViewInverse[3].xyz;
		return makeRay(ro, rd);
	}

	void marchRay(inout Ray ray, float2 minMaxDist = float2(.05, 100), int maxIter = 180)
	{
		float3 startPos = ray.ro + ray.rd * minMaxDist.x;
		float3 p = startPos;
		float z = minMaxDist.x;
		//maxDist -= minDist;
		for(int i=0; i<maxIter; i++)
		{
			float dist = SDF(p);
			p += ray.rd * dist;	
			z += dist;
			if(abs(dist) < 0.0001 * z || z > minMaxDist.y) break;
		}

		if(z > minMaxDist.y) discard;
		ray.sp = p;
	}

	float4 shadeRay(Ray ray)
	{		
		float4 c=1;
		c.rgb = ray.sn;
		c.rgb = c.rgb * 0.5 + 0.5; // remap normals to 0-1
		c.a = 1;

		float4 PosWVP = mul(float4(ray.sp, 1), ViewProjection);
		streams.Depth = PosWVP.z/PosWVP.w;
		return c;

	}

	void killRay() {discard;};

	//float2 clipRay(Ray ray, float3 pos = 0., float3 rad = 20.)  // box
	
	float2 cullRay(Ray ray)  // box
	{
		float3 pos = 0.; 
		float3 rad = 2.;
		float3 m = 1.0 / ray.rd;
		float3 n = m * (ray.ro - pos);
		float3 k = abs(m) * rad;
		float3 t1 = -n - k;
		float3 t2 = -n + k;

		float tN = max( max( t1.x, t1.y ), t1.z );
		float tF = min( min( t2.x, t2.y ), t2.z );
	
		if( tN > tF || tF < 0.0) killRay(); // no intersection
	
		return float2( tN, tF );
	}

	





	



	float4 rayDebug()
	{

		float2 minMaxDist = float2(.01, 100);
		float3 bbRad = 2.6;
		float3 bbPos = float3(.5, 0, 0);

		float2 uv = streams.TexCoord; // Takes uv as input

		Ray ray = setupRay();
		minMaxDist = cullRay(ray);
		marchRay(ray, minMaxDist);
		ray.sn = SDFNormal(ray.sp);
		return shadeRay(ray);


	}

};