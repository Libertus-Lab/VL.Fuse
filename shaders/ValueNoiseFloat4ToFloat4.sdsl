shader ValueNoiseFloat4ToFloat4 : Float4ToFloat4, Hash
{

    // returns closest, second closest, and cell id
    override float4 Compute(float4 x)
    {
        float3 i = floor(x);
        float3 w = frac(x);
    
#if 1
        // quintic interpolation
        float3 u = w*w*w*(w*(w*6.0-15.0)+10.0);
        float3 du = 30.0*w*w*(w*(w-2.0)+1.0);
#else
        // cubic interpolation
        float3 u = w*w*(3.0-2.0*w);
        float3 du = 6.0*w*(1.0-w);
#endif    
    
    
        float a = hash13(i+float3(0.0,0.0,0.0));
        float b = hash13(i+float3(1.0,0.0,0.0));
        float c = hash13(i+float3(0.0,1.0,0.0));
        float d = hash13(i+float3(1.0,1.0,0.0));
        float e = hash13(i+float3(0.0,0.0,1.0));
	    float f = hash13(i+float3(1.0,0.0,1.0));
        float g = hash13(i+float3(0.0,1.0,1.0));
        float h = hash13(i+float3(1.0,1.0,1.0));
	
        float k0 =   a;
        float k1 =   b - a;
        float k2 =   c - a;
        float k3 =   e - a;
        float k4 =   a - b - c + d;
        float k5 =   a - c - e + g;
        float k6 =   a - b - e + f;
        float k7 = - a + b + c - d + e - f - g + h;

        return float4( k0 + k1*u.x + k2*u.y + k3*u.z + k4*u.x*u.y + k5*u.y*u.z + k6*u.z*u.x + k7*u.x*u.y*u.z, 
                 du * float3( k1 + k4*u.y + k6*u.z + k7*u.y*u.z,
                            k2 + k5*u.z + k4*u.x + k7*u.z*u.x,
                            k3 + k6*u.x + k5*u.y + k7*u.x*u.y ) );
    }
};