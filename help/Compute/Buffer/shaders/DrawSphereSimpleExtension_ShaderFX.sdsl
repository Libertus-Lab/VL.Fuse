shader DrawSphereSimpleExtension_ShaderFX : MaterialExtension
{
	

	compose ComputeFloat SizeProvider;

	stage stream float3 velocity : VELOCITY;
	stage stream float size : SIZE;

	// End of the VS (usually skinning)
	stage override void PreTransformPosition() {}

	// End of tessellation (usually displacement mapping in world space, etc...)
	stage override void TransformPosition() {}

	

	static const float3 QuadPositions[4] = {
        float3(-1,  1, 0),
        float3( 1,  1, 0),
        float3(-1, -1, 0),
        float3( 1, -1, 0),
    };

	static const float2 QuadUV[4] = {
        float2(0, 1), 
        float2(1, 1),
        float2(0, 0),
        float2(1, 0)
    };


		// custom geometry shader, quad particle in this case
	[maxvertexcount(4)]
	stage void GSMain(point Input input[1], inout TriangleStream<Output> triangleStream)
	{
		streams = input[0];

		// get data from ParticleProvider implementation
		streams.PositionWS = float4(streams.Position.xyz, 1);
		float4 posView = mul(streams.PositionWS, WorldView);

		for (int i=0; i<4; i++)
		{
			streams.TexCoord  = QuadUV[i].xy * 2 - 1; //center and scale for sphere impostor
			float4 viewCornerPos = float4(posView.xyz + QuadPositions[i].xyz * streams.size, 1);
			streams.ShadingPosition = mul(viewCornerPos, Projection);

			triangleStream.Append(streams);
		}     
	}

	compose ComputeFloat4 worldPos;
	compose ComputeFloat3 normal;


	//override shading, create sphere impostor in this case
	stage override float4 Shading()
	{
		/*
		float2 mapping = streams.TexCoord;
		float lenSqr = dot(mapping, mapping);
		if (lenSqr > 1)
			discard; // Circles
		
		float z = sqrt(1 - lenSqr);

		float3 normal = float3(mapping, z);
		normal = normalize(mul(float4(normal, 0), ViewInverse).xyz);
		
		// new code to write pos & depth
		// Shadows look correct now, but if you move the camera a distance away have other weirdness
		// 
		float4 worldPos = float4((normal * streams.size) + streams.PositionWS.xyz, 1);
		// 
*/
		return StrideShadingWorldNormal(worldPos.Compute(), normal.Compute());
	}
};