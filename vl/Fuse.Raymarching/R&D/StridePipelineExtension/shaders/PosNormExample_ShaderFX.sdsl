shader PosNormExample_ShaderFX : PosNormOverride, ComputeFloat, FuseRaymarcher
{
    cbuffer PerMaterial
    {
        stage float4 JuliaParams = float4(.33, 0.2, .55, 0.0);
        stage int Iterations = 20;
    }

    compose ComputeFloat Value;

    
    override stage float SDF(float3 p)
    {
        return fSphere(p, 0.5);
        //return fRBox(p, float3(0.5, 0.5, 0.5), 0.1);
        //return fJulia(p, JuliaParams, Iterations);//fJulia(float3 p, float4 pars = , uint iter = 11)
        //return fJulia(p, float4(.33, 0.2, .55, 0.0), 20);//fJulia(float3 p, float4 pars = , uint iter = 11)
        //return fKaliThorns(p, 0.2, 1.4);
    }
    



    override stage void posNormByFunction (out float3 p, out float3 n)
    {
        // Raymarcher 
        ////////////////////////////////////////////////////////////////

        // Takes uv as input
        float2 uv = streams.TexCoord.xy; 
        float3 rd;   	
        float z; 
        rayMarcher(uv, p, n, rd, z); 
        // Outputs surface posistion(p) & normals(n), ray direction(rd) & length(z) 

        ////////////////////////////////////////////////////////////////

    }
    

    override float Compute()
    {
        return Value.Compute();
    }
};