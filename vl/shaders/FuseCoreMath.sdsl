shader FuseCoreMath{

	float maxComponent1(float theValue){
		return theValue;
	}

	float maxComponent2(float2 theValue){
		return max(theValue.x, theValue.y);
	}

	float maxComponent3(float3 theValue){
		return max(max(theValue.x, theValue.y), theValue.z);
	}

	float maxComponent4(float4 theValue){
		return max(max(theValue.x, theValue.y),max(theValue.z, theValue.w));
	}

	float sumComponent1(float theValue){
		return theValue;
	}

	float sumComponent2(float2 theValue){
		return theValue.x + theValue.y;
	}

	float sumComponent3(float3 theValue){
		return theValue + theValue.y + theValue.z;
	}

	float sumComponent4(float4 theValue){
		return theValue + theValue.y + theValue.z + theValue.w;
	}
	// ^

	// for functions like this where the signiture is distinct I think we should just overload the function.  
	// This is cleaner and will also reduce patch boilerplate for the correct mixin function 

	// eg
	float minComponent(float theValue)
	{
		return theValue;
	}

	float minComponent(float2 theValue)
	{
		return max(theValue.x, theValue.y);
	}

	float minComponent(float3 theValue)
	{
		return max(max(theValue.x, theValue.y), theValue.z);
	}

	float minComponent(float4 theValue)
	{
		return max(max(theValue.x, theValue.y),max(theValue.z, theValue.w));
	}

	////////////////////////////////////////////////////////////////
	//
	//             Constants
	//
	////////////////////////////////////////////////////////////////


	static const float PI = 3.1415926535897;

	static const float INVPI = 0.31830988618;

	static const float HALFPI = 1.57079632679;

	static const float TWOPI = 6.28318531;

	static const float TAU = (2*PI);

	static const float FOUR_PI = 12.56637061436;

	static const float PHI = 1.6180339887498;

	static const float FLOATMIN = 1.175494351e-38; 
	// Minimum representable positive floating-point number



	static const float FLOATMAX = 3.402823466e+38;
	// Maximum representable floating-point number


	////////////////////////////////////////////////////////////////
	//
	//             Safe pow functions
	//
	////////////////////////////////////////////////////////////////

	float pows(float a, float b) {return pow(abs(a),b)*sign(a);}
	float2 pows(float a, float2 b) {return pow(abs(a),b)*sign(a);}
	float3 pows(float a, float3 b) {return pow(abs(a),b)*sign(a);}
	float4 pows(float a, float4 b) {return pow(abs(a),b)*sign(a);}

	float2 pows(float2 a, float b) {return pow(abs(a),b)*sign(a);}
	float2 pows(float2 a, float2 b) {return pow(abs(a),b)*sign(a);}

	float3 pows(float3 a, float b) {return pow(abs(a),b)*sign(a);}
	float3 pows(float3 a, float3 b) {return pow(abs(a),b)*sign(a);}

	float4 pows(float4 a, float b) {return pow(abs(a),b)*sign(a);}
	float4 pows(float4 a, float4 b) {return pow(abs(a),b)*sign(a);}

	////////////////////////////////////////////////////////////////
	//
	//             Vector Min/Max
	//
	////////////////////////////////////////////////////////////////

	// same as sumComponent functions
	
	float vmax(float2 v) 
	{
		return max(v.x, v.y);
	}

	float vmax(float3 v) 
	{
		return max(max(v.x, v.y), v.z);
	}

	float vmax(float4 v) 
	{
		return max(max(v.x, v.y), max(v.z, v.w));
	}

	float vmin(float2 v) 
	{
		return min(v.x, v.y);
	}

	float vmin(float3 v) 
	{
		return min(min(v.x, v.y), v.z);
	}

	float vmin(float4 v) {
		return min(min(v.x, v.y), min(v.z, v.w));
	}


	////////////////////////////////////////////////////////////////
	//
	//             HELPER FUNCTIONS
	//
	////////////////////////////////////////////////////////////////

	// Sign function that doesn't return 0
	float sgn(float x) 
	{
		return (x<0)?-1:1;
	}

	float2 sgn(float2 v) 
	{
		return float2((v.x<0)?-1:1, (v.y<0)?-1:1);
	}

	float square (float x) 
	{
		return x*x;
	}

	float2 square (float2 x) 
	{
		return x*x;
	}

	float3 square (float3 x) 
	{
		return x*x;
	}

	float lengthSqr(float3 x) 
	{
		return dot(x, x);
	}

	float dot2( in float3 v ) { return dot(v,v); }

	// glsl style mod
	#ifndef mod
	#define mod(x, y) (x - y * floor((x) / y))
	#endif

};