shader FuseBuffer
{

	////////////////////////////////////////////////////////////////
	//
	//             Structured Buffer Helpers
	//
	////////////////////////////////////////////////////////////////
	
	// these should be valid as an overload of sbSize with different signatures, but Stride does not seem to spot type difference in StructuredBuffer<TYPE>
	uint sbSize (StructuredBuffer<float> sBuffer)
	{
		uint count, dummy;	
		sBuffer.GetDimensions(count, dummy);
		return count;
	}

	uint sbSize2 (StructuredBuffer<float2> sBuffer)
	{
		uint count, dummy;	
		sBuffer.GetDimensions(count, dummy);
		return count;
	}

	uint sbSize3 (StructuredBuffer<float3> sBuffer)
	{
		uint count, dummy;	
		sBuffer.GetDimensions(count, dummy);
		return count;
	}

	uint sbSize4 (StructuredBuffer<float4> sBuffer)
	{
		uint count, dummy;	
		sBuffer.GetDimensions(count, dummy);
		return count;
	}

	int sbSizeI (StructuredBuffer<int> sBuffer)
	{
		int count, dummy;	
		sBuffer.GetDimensions(count,dummy);
		return count;
	}


	uint sbSizeUI (StructuredBuffer<uint> sBuffer)
	{
		uint count, dummy;	
		sBuffer.GetDimensions(count,dummy);
		return count;
	}

	//  seems to be some issue with parsing matrix as buffer type in VL/Stride
	/*
	uint sBSize (StructuredBuffer<float4x4> sBuffer)
	{
		uint count, dummy;	
		sBuffer.GetDimensions(count, dummy);
		return count;
	}
	*/



	// Safe Buffer Load with Defualt value

	float sbLoad(StructuredBuffer<float> sBuffer, uint index, float defaultValue = 0.)
	{
		float value = defaultValue;
		uint count = sbSize(sBuffer);
		if (count > 0) value = sBuffer[index % count];
		return value;
	}

	float2 sbLoad(StructuredBuffer<float2> sBuffer, uint index, float2 defaultValue = 0.)
	{
		float2 value = defaultValue;
		uint count = sbSize2(sBuffer);
		if (count > 0) value = sBuffer[index % count];
		return value;
	}

	float3 sbLoad(StructuredBuffer<float3> sBuffer, uint index, float3 defaultValue = 0.)
	{
		float3 value = defaultValue;
		uint count = sbSize3(sBuffer);
		if (count > 0) value = sBuffer[index % count];
		return value;
	}

	float4 sbLoad(StructuredBuffer<float4> sBuffer, uint index, float4 defaultValue = 0.)
	{
		float4 value = defaultValue;
		uint count = sbSize4(sBuffer);
		if (count > 0) value = sBuffer[index % count];
		return value;
	}

	int sbLoad(StructuredBuffer<uint> sBuffer, uint index, int defaultValue = 0)
	{
		uint value = defaultValue;
		uint count = sbSizeI(sBuffer);
		if (count > 0) value = sBuffer[index % count];
		return value;
	}

	uint sbLoad(StructuredBuffer<uint> sBuffer, uint index, uint defaultValue = 0)
	{
		uint value = defaultValue;
		uint count = sbSizeUI(sBuffer);
		if (count > 0) value = sBuffer[index % count];
		return value;
	}

	//  seems to be some issue with matrix as buffer type in VL/Stride
	/*
	float4x4 sbLoad(StructuredBuffer<float4x4> sBuffer, float4x4 defaultValue, uint dtid)
	{
		float4x4 value = defaultValue;
		uint count = sbSize(sBuffer);
		if (count > 0) value = sBuffer[dtid.x % count];
		return value;
	}
	*/

	
};