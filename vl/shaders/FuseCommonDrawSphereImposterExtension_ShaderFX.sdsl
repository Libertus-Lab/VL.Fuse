shader FuseCommonDrawSphereImposterExtension_ShaderFX : ShaderBaseStream, Transformation, TransformationBase, PositionStream4, NormalStream, Texturing, ShadingBase, ShaderBase
{
	compose SphereProvider Provider;

	stage stream float sphereSize;
    stage stream float3 spherePos;

    	// End of the VS (usually skinning)
	stage override void PreTransformPosition() {}

	// End of tessellation (usually displacement mapping in world space, etc...)
	stage override void TransformPosition() {}

	// At the end of the geometry pipeline (to generate ShadingPosition)
	stage override void PostTransformPosition()
	{
		streams.ShadingPosition = streams.PositionWS; // must be assigned to something
	}

	void sphereImpostor(float2 screenCoord, float3 spherePos, float sphereRadius, out float3 pos, out float3 normal)
	{
		float3 cameraSpherePos = mul(float4(spherePos, 1), View).xyz;

		float3 cameraPlanePos = float3(screenCoord * sphereRadius, 0.0) + cameraSpherePos;
		float3 rayDirection = normalize(cameraPlanePos);
	
		float B = 2.0 * dot(rayDirection, -cameraSpherePos);
		float C = dot(cameraSpherePos, cameraSpherePos) - (sphereRadius * sphereRadius);
	
		float det = (B * B) - (4 * C);
		if(det < 0.0)
			discard;
		
		float sqrtDet = sqrt(det);
		float posT = (-B + sqrtDet)/2;
		float negT = (-B - sqrtDet)/2;
	
		float intersectT = min(posT, negT);
		pos = rayDirection * intersectT;
		normal = normalize(pos - cameraSpherePos);

		// back to world space
		normal = normalize(mul(float4(normal, 0), ViewInverse).xyz);
		pos = (normal * sphereRadius) + spherePos;
	}
	

	static const float3 QuadPositions[4] = {
        float3(-1, 1,0),
        float3( 1, 1,0),
        float3(-1, -1,0),
        float3( 1, -1,0),
	};

	[maxvertexcount(4)]
	stage void GSMain(point Input input[1], inout TriangleStream<Output> triangleStream)
	{
		streams = input[0];
		streams.spherePos = float4(Provider.getSpherePos(), 1);
		streams.sphereSize = Provider.getSphereSize();


		float padding = 1.5;
		float2 offset;
		float4 cameraSpherePos = mul(streams.PositionWS, WorldView);
		
		for (int i = 0; i<4; i++) 
		{
			streams.TexCoord = QuadPositions[i].xy * padding;
			offset = sign(QuadPositions[i].xy) * streams.sphereSize;
			float4 viewCornerPos = cameraSpherePos;
			viewCornerPos.xy += offset * padding;
			streams.ShadingPosition = mul(viewCornerPos, Projection);
			triangleStream.Append(streams);
		}

	}

	stage override float4 Shading() 
	{

		float3 p, n;
		//float size = getSphereSize();
		float size = streams.sphereSize;
		sphereImpostor(streams.TexCoord, streams.spherePos.xyz, size, p, n);

		// take care for pipeline streams, should be abstracted
		///////////////////////////////////////////////////////////////
		streams.spherePos = float4(p.xyz, 1);
		float4 PosWVP = mul(streams.spherePos, ViewProjection);
		streams.normalWS = n;
		streams.meshNormalWS = n;
		streams.DepthVS = PosWVP.w;
		streams.Depth = PosWVP.z/PosWVP.w;
		return base.Shading();
		////////////////////////////////////////////////////////////////
	}
};