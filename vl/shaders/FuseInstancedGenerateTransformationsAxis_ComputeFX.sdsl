[Summary("Increments values in a buffer.")]
shader FuseInstancedGenerateTransformationsAxis_ComputeFX : ComputeShaderBase, TransformUtils, FuseCoreTransform
{
    float3x3 GetScaleMatrix(float3 scale)
    {
        return float3x3(
            scale.x, 0, 0,
            0, scale.y, 0,
            0, 0, scale.z
        );
    }

    float3x3 GetRotationMatrix(float3 axis, float angle)
    {
    float2 sincosA;
    sincos(angle, sincosA.x, sincosA.y);
    const float c = sincosA.y;
    const float s = sincosA.x;
    const float t = 1.0 - c;
    const float x = axis.x;
    const float y = axis.y;
    const float z = axis.z;

    return float3x3(
        t * x * x + c, t * x * y - s * z, t * x * z + s * y,
        t * x * y + s * z, t * y * y + c, t * y * z - s * x,
        t * x * z - s * y, t * y * z + s * x, t * z * z + c);
    }

    float3x3 GetEulerMatrix(float3 angles)
    {
        float3 s, c;
        sincos(angles, s, c);

        return float3x3(
            c.y * c.z + s.x * s.y * s.z, c.z * s.x * s.y - c.y * s.z, c.x * s.y,
            c.x * s.z, c.x * c.z, -s.x,
            -c.z * s.y + c.y * s.x * s.z, c.y * c.z * s.x + s.y * s.z, c.x * c.y);
    }

    float4x4 ParticleWorldMatrix(float3 axisX, float3 axisY, float3 axisZ, float3x3 rot, float3 pivot, float3 size, float3 pos)
    {
        float3x3 rotAndScale = GetScaleMatrix(size);
        rotAndScale = mul(rot, rotAndScale);
        rotAndScale = mul(transpose(float3x3(axisX, axisY, axisZ)), rotAndScale);
        pos -= mul(rotAndScale, pivot);
        return float4x4(
            float4(rotAndScale[0].x, rotAndScale[1].x, rotAndScale[2].x, 0),
            float4(rotAndScale[0].y, rotAndScale[1].y, rotAndScale[2].y, 0),
            float4(rotAndScale[0].z, rotAndScale[1].z, rotAndScale[2].z, 0),
            float4(pos.x, pos.y, pos.z, 1));
    }

    float4x4 ParticleWorldMatrix(float3 axisX, float3 axisY, float3 axisZ, float3 angles, float3 pivot, float3 size, float3 pos)
    {
        float3x3 rot = GetEulerMatrix(radians(angles));
        return ParticleWorldMatrix(axisX, axisY, axisZ, rot, pivot, size, pos);
    }

    // Invert 3D transformation matrix (not perspective). Adapted from graphics gems 2.
// Inverts upper left by calculating its determinant and multiplying it to the symmetric
// adjust matrix of each element. Finally deals with the translation by transforming the
// original translation using by the calculated inverse.
//https://github.com/erich666/GraphicsGems/blob/master/gemsii/inverse.c
float4x4 InverseTRSMatrix(float4x4 input)
{
    float4x4 output = (float4x4)0;

    //Fill output with cofactor
    output._m00 = input._m11 * input._m22 - input._m12 * input._m21;
    output._m10 = input._m12 * input._m20 - input._m10 * input._m22;
    output._m20 = input._m10 * input._m21 - input._m11 * input._m20;
    output._m01 = input._m02 * input._m21 - input._m01 * input._m22;
    output._m11 = input._m00 * input._m22 - input._m02 * input._m20;
    output._m21 = input._m01 * input._m20 - input._m00 * input._m21;
    output._m02 = input._m01 * input._m12 - input._m02 * input._m11;
    output._m12 = input._m02 * input._m10 - input._m00 * input._m12;
    output._m22 = input._m00 * input._m11 - input._m01 * input._m10;

    //Multiply by reciprocal determinant
    float det = determinant((float3x3)input);
    const bool degenerate = (det * det) < 1e-25 ; //Condition consistent with C++ InvertMatrix4x4_General3D()
    output *= degenerate ? 0.0f :  rcp(det) ;

    // Do the translation part
    output._m30_m31_m32 = -mul((float3x3)output, input._m30_m31_m32);
    output._m33 = degenerate ? 0.0f : 1.0f;

    return output;
}

float4x4 inverse(float4x4 m) {
    float n11 = m[0][0], n12 = m[1][0], n13 = m[2][0], n14 = m[3][0];
    float n21 = m[0][1], n22 = m[1][1], n23 = m[2][1], n24 = m[3][1];
    float n31 = m[0][2], n32 = m[1][2], n33 = m[2][2], n34 = m[3][2];
    float n41 = m[0][3], n42 = m[1][3], n43 = m[2][3], n44 = m[3][3];

    float t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44;
    float t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44;
    float t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44;
    float t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;

    float det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;
    float idet = 1.0f / det;

    float4x4 ret;

    ret[0][0] = t11 * idet;
    ret[0][1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * idet;
    ret[0][2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * idet;
    ret[0][3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * idet;

    ret[1][0] = t12 * idet;
    ret[1][1] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * idet;
    ret[1][2] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * idet;
    ret[1][3] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * idet;

    ret[2][0] = t13 * idet;
    ret[2][1] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * idet;
    ret[2][2] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * idet;
    ret[2][3] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * idet;

    ret[3][0] = t14 * idet;
    ret[3][1] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * idet;
    ret[3][2] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * idet;
    ret[3][3] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * idet;

    return ret;
}

    struct Transform //needed put float4x4 into a structured buffer
    {
        float4x4 Matrix;
    };

    float3 Angles;
    float3 Pivot;

	StructuredBuffer<float3> Position;
	StructuredBuffer<float3> AxisX;
	StructuredBuffer<float3> AxisY;
	StructuredBuffer<float3> AxisZ;
	StructuredBuffer<float3> Size;
	RWStructuredBuffer<Transform> InstanceWorld;
	RWStructuredBuffer<Transform> InstanceWorldInverse;

    override void Compute()
    {
        uint index = streams.DispatchThreadId.x;
        
        float3 pos = Position[index];
        float3 axisX = AxisX[index];
        float3 axisY = AxisY[index];
        float3 axisZ = AxisZ[index]; 
        float3 size = Size[index]; 

        float4x4 world = ParticleWorldMatrix(axisX, axisY, axisZ, Angles, Pivot, size, pos);
        float4x4 worldInverse = InverseTRSMatrix(world);

        //TransformTRSWithInverse(pos, normalize(vel), ParticleSize, world, worldInverse);

        InstanceWorld[index].Matrix = world;
        InstanceWorldInverse[index].Matrix = worldInverse;
    }
};