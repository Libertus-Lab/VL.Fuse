//----------------------------------------------------------------------------------
// File:   FluidSim.fx
// Author: Sarah Tariq and Ignacio Llamas
// Email:  sdkfeedback@nvidia.com
//
// Copyright (c) 2007 NVIDIA Corporation. All rights reserved.
//
// TO  THE MAXIMUM  EXTENT PERMITTED  BY APPLICABLE  LAW, THIS SOFTWARE  IS PROVIDED
// *AS IS*  AND NVIDIA AND  ITS SUPPLIERS DISCLAIM  ALL WARRANTIES,  EITHER  EXPRESS
// OR IMPLIED, INCLUDING, BUT NOT LIMITED  TO, IMPLIED WARRANTIES OF MERCHANTABILITY
// AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO EVENT SHALL  NVIDIA OR ITS SUPPLIERS
// BE  LIABLE  FOR  ANY  SPECIAL,  INCIDENTAL,  INDIRECT,  OR  CONSEQUENTIAL DAMAGES
// WHATSOEVER (INCLUDING, WITHOUT LIMITATION,  DAMAGES FOR LOSS OF BUSINESS PROFITS,
// BUSINESS INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER PECUNIARY LOSS)
// ARISING OUT OF THE  USE OF OR INABILITY  TO USE THIS SOFTWARE, EVEN IF NVIDIA HAS
// BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
//
//
//----------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------
// Shaders to implement a "stable fluids" style semi-Lagrangian solver for 3D smoke
//--------------------------------------------------------------------------------------
// It assumes the velocity and pressure grids are collocated
// It handles boundary conditions for static obstacles stored as an in/out voxel volume
// BFECC is supported for smoke density advection
// The diffusion step is skipped
//--------------------------------------------------------------------------------------

shader ObstaclesVelocity_ComputeFX : ComputeShaderBase, FluidGlobals
{
    //--------------------------------------------------------------------------------------
    // Textures
    //--------------------------------------------------------------------------------------
    Texture3D <float4> CylinderVelocity;
    RWTexture3D<float3> Texture_ObstVelocity; //Output Texture
    //Texture2DArray<float4> TexOV;

    //--------------------------------------------------------------------------------------
    // Compute Shader
    //--------------------------------------------------------------------------------------

    override void Compute()
    {
   
        uint3 i = streams.DispatchThreadId;

        //Texture_ObstVelocity[i] = TexOV[i];
        float3 cylinderVel = CylinderVelocity[i].xyz;

        
        Texture_ObstVelocity[i] = cylinderVel;

    }

};