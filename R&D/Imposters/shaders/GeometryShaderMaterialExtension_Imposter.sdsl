shader GeometryShaderMaterialExtension_Imposter : ParticleProvider, TransformationBase, PositionStream4, Texturing, ShadingBase, ShaderUtils
{

	// adapted from IQ raytrace sphere code.  Returns pos and normal in camera space 
	void Impostor(float2 mapping, float sphereRadius, float3 cameraSpherePos, out float3 pos, out float3 normal)
	{
		float3 cameraPlanePos = float3(mapping * sphereRadius, 0.0) + cameraSpherePos;
		float3 rayDirection = normalize(cameraPlanePos);
	
		float B = 2.0 * dot(rayDirection, -cameraSpherePos);
		float C = dot(cameraSpherePos, cameraSpherePos) - (sphereRadius * sphereRadius);
	
		float det = (B * B) - (4 * C);
		if(det < 0.0)
			discard;
		
		float sqrtDet = sqrt(det);
		float posT = (-B + sqrtDet)/2;
		float negT = (-B - sqrtDet)/2;
	
		float intersectT = min(posT, negT);
		pos = rayDirection * intersectT;
		normal = normalize(pos - cameraSpherePos);
	}



	//we cannot use data input here

	// End of the VS (usually skinning)
	stage override void PreTransformPosition() 
	{
		streams.VID = streams.VertexID;
		streams.PositionWS = streams.Position;
	}

	// End of tessellation (usually displacement mapping in world space, etc...)
	stage override void TransformPosition() {}

	// At the end of the geometry pipeline (to generate ShadingPosition)
	stage override void PostTransformPosition()
	{
		streams.ShadingPosition = streams.PositionWS; //not
	}

	[maxvertexcount(4)]
	stage void GSMain(point Input input[1], inout TriangleStream<Output> triangleStream)
	{
		streams = input[0];
		streams.PositionWS = GetWorldPosition();
		float pSize = GetParticleSize();
		//float3 normWS = GetWorldNormal();
		//streams.normalWS = normWS;
		//streams.meshNormalWS = normWS;



		/////////////////////////////////////////////////////////////////////
		float padding = 1.5;
		float2 offset;
		float4 cameraSpherePos = mul(streams.PositionWS, WorldView);
		
		for (int i = 0; i<4; i++) 
		{

			streams.TexCoord = QuadPositions[i].xy * padding;
			offset = sign(QuadPositions[i].xy) * pSize;
			float4 viewCornerPos = cameraSpherePos;
			viewCornerPos.xy += offset * padding;
			streams.ShadingPosition = mul(viewCornerPos, Projection);

			triangleStream.Append(streams);
		}

		/////////////////////////////////////////////////////////////////////
		
		/*
		for (int i=0; i<4; i++)
		{
			streams.TexCoord  = QuadUV[i].xy;

			float4 posView = mul(streams.PositionWS, WorldView);
			posView.xyz += QuadPositions[i].xyz * pSize;
			streams.ShadingPosition = mul(posView, Projection);

			triangleStream.Append(streams);
		}     
		*/
	}




	stage override float4 Shading() 
	{

		//return base.Shading();  // issue seems to be before this in the GS
		float3 posWV, normWV;
		float size = GetParticleSize();
		Impostor(streams.TexCoord, size, mul(streams.PositionWS, View).xyz, posWV, normWV); // last two are function outputs only
	
		//float3 worldNormal = mul(normWV, (float3x3)tVI );
		float3 worldNormal = normalize(mul(float4(normWV, 0), ViewInverse).xyz);
		float3 worldPos = (worldNormal * size) + streams.PositionWS.xyz;
	
		streams.ShadingPosition = mul(float4(worldPos, 1), ViewProjection);

		streams.DepthVS = streams.ShadingPosition.w;
		streams.Depth = streams.ShadingPosition.z/streams.ShadingPosition.w;

		streams.normalWS = worldNormal;
		streams.meshNormalWS = worldNormal;

		return base.Shading();


		/*
		float2 mapping = streams.TexCoord * 2 - 1;
		float lenSqr = dot(mapping, mapping);
		if (lenSqr > 1)
			discard; // Circles
		
		float z = sqrt(1 - lenSqr);

		float3 normal = float3(mapping, z);
		normal = normalize(mul(float4(normal, 0), ViewInverse).xyz);

		streams.normalWS = normal;
		streams.meshNormalWS = normal;

		return base.Shading();
		*/
	}

	/*
	stage override float4 Shading() 
	{
		float2 mapping = streams.TexCoord * 2 - 1;
		float lenSqr = dot(mapping, mapping);
		if (lenSqr > 1)
			discard; // Circles
		
		float z = sqrt(1 - lenSqr);

		float3 normal = float3(mapping, z);
		normal = normalize(mul(float4(normal, 0), ViewInverse).xyz);

		streams.normalWS = normal;
		streams.meshNormalWS = normal;

		return base.Shading();
	}
	*/
};