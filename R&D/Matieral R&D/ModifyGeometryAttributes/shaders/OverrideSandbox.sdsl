shader OverrideSandbox : ComputeFloat4, ShaderBaseStream, Camera, MaterialVertexStream, MaterialPixelStream, Texturing, Transformation
{
	compose ComputeFloat4 Color;
	compose ComputeFloat Amount;

	override float4 Compute()
	{
		//float4 col = float4(streams.TexCoord.x, streams.TexCoord.y, 0, 1);
		float4 col = Color.Compute();
		//float amount = Amount.Compute();
		float4 colInv = col;
		colInv.rgb = 1 - colInv.rgb;
		var su = sin(streams.TexCoord.x * 45) * 0.5 + 0.5;
		var sv = sin(streams.TexCoord.y * 90) * 0.5 + 0.5;
		//streams.Depth = ComputeZProjFromDepth(sv * su * 0.49 + 4);
		
		// streams.matNormal = streams.normalWS ;
		// streams.matDiffuse = col;
		// streams.matColorBase = col;
		// streams.matGlossiness = su;
		streams.PositionWS = mul(streams.PositionWS, mul(ProjectionInverse, ViewInverse));
		streams.Position = mul(streams.Position, mul(ProjectionInverse, ViewInverse));
		//streams.PositionWS  += su;

		return Color.Compute();
	}

	float ComputeZProjFromDepth(float depth) 
	{
		return (ZProjection.y / depth) + ZProjection.x;
	}
};